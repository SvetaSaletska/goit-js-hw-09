{"mappings":"oeAAAA,EAAA,SAGMC,SAASC,cAAc,SACtBD,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst elements = {\nform: document.querySelector('.form'),\ndelay: document.querySelector('input[name=\"delay\"]'),\nstep: document.querySelector('input[name=\"step\"]'),\namount: document.querySelector('input[name=\"amount\"]'),\n};\n\nfunction submit(evt) {\n  evt.preventDefault();\n  let delay = Number(elements.delay.value);\n  const step = Number(elements.step.value);\n  const amount = Number(elements.amount.value);\n  let position;\n  for (let i = 1; i <= amount; i += 1){\n    createPromise(i, elements.delay);\n    delay += elements.step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise ((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay)\n  })\n\n  promise\n\n  .then(({position, delay}) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n\n"],"names":["parcelRequire","document","querySelector"],"version":3,"file":"03-promises.640ac7c4.js.map"}